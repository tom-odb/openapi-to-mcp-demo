{
  "api_name": "products",
  "base_url": "http://localhost:3000",
  "tools": [
    {
      "name": "listProducts",
      "description": "Retrieve a paginated list of products",
      "input_schema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 200,
            "default": 20,
            "description": "Number of items per page"
          },
          "category": {
            "type": "string",
            "description": "Filter by category"
          }
        },
        "required": []
      },
      "endpoint_mapping": {
        "path": "/products",
        "method": "get"
      },
      "is_composite": false
    },
    {
      "name": "createProduct",
      "description": "Create a new product",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "endpoint_mapping": {
        "path": "/products",
        "method": "post"
      },
      "is_composite": false
    },
    {
      "name": "getProduct",
      "description": "Get product details",
      "input_schema": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "productId"
        ]
      },
      "endpoint_mapping": {
        "path": "/products/{productId}",
        "method": "get"
      },
      "is_composite": false
    },
    {
      "name": "updateProduct",
      "description": "Update a product",
      "input_schema": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "productId"
        ]
      },
      "endpoint_mapping": {
        "path": "/products/{productId}",
        "method": "put"
      },
      "is_composite": false
    },
    {
      "name": "deleteProduct",
      "description": "Delete a product",
      "input_schema": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "productId"
        ]
      },
      "endpoint_mapping": {
        "path": "/products/{productId}",
        "method": "delete"
      },
      "is_composite": false
    },
    {
      "name": "listOrders",
      "description": "List all orders",
      "input_schema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "shipped",
              "delivered",
              "cancelled"
            ],
            "description": "Filter by order status"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "description": "Filter by customer ID"
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 200,
            "default": 20,
            "description": "Number of items per page"
          }
        },
        "required": []
      },
      "endpoint_mapping": {
        "path": "/orders",
        "method": "get"
      },
      "is_composite": false
    },
    {
      "name": "createOrder",
      "description": "Create a new order",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "endpoint_mapping": {
        "path": "/orders",
        "method": "post"
      },
      "is_composite": false
    },
    {
      "name": "getOrder",
      "description": "Get order details",
      "input_schema": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "orderId"
        ]
      },
      "endpoint_mapping": {
        "path": "/orders/{orderId}",
        "method": "get"
      },
      "is_composite": false
    },
    {
      "name": "listCustomers",
      "description": "List all customers",
      "input_schema": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Search by name or email"
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 200,
            "default": 20,
            "description": "Number of items per page"
          }
        },
        "required": []
      },
      "endpoint_mapping": {
        "path": "/customers",
        "method": "get"
      },
      "is_composite": false
    },
    {
      "name": "createCustomer",
      "description": "Create a new customer",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "endpoint_mapping": {
        "path": "/customers",
        "method": "post"
      },
      "is_composite": false
    },
    {
      "name": "getCustomer",
      "description": "Get customer details",
      "input_schema": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "customerId"
        ]
      },
      "endpoint_mapping": {
        "path": "/customers/{customerId}",
        "method": "get"
      },
      "is_composite": false
    },
    {
      "name": "listCustomerOrders",
      "description": "List orders for a customer",
      "input_schema": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 200,
            "default": 20,
            "description": "Number of items per page"
          }
        },
        "required": [
          "customerId"
        ]
      },
      "endpoint_mapping": {
        "path": "/customers/{customerId}/orders",
        "method": "get"
      },
      "is_composite": false
    }
  ],
  "composite_tools": [
    {
      "name": "get_customer_with_recent_products",
      "description": "Retrieves customer details along with the last 10 products they ordered, providing a comprehensive view of the customer's recent purchase history",
      "use_case_description": "Retrieve a customer with the last 10 products they ordered.",
      "input_schema": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "The unique identifier of the customer"
          }
        },
        "required": [
          "customerId"
        ]
      },
      "endpoint_mappings": [
        {
          "path": "/products/{productId}",
          "method": "get",
          "operation_id": "getProduct",
          "purpose": "Gets detailed information for each product found in the customer's recent orders"
        },
        {
          "path": "/orders/{orderId}",
          "method": "get",
          "operation_id": "getOrder",
          "purpose": ""
        },
        {
          "path": "/customers/{customerId}",
          "method": "get",
          "operation_id": "getCustomer",
          "purpose": "Retrieves the customer's basic information and details"
        },
        {
          "path": "/customers/{customerId}/orders",
          "method": "get",
          "operation_id": "listCustomerOrders",
          "purpose": "Fetches the customer's order history to identify recent orders containing products"
        }
      ],
      "orchestration_logic": "1) Call GET /customers/{customerId} with the provided customerId to retrieve customer details, 2) Call GET /customers/{customerId}/orders with the same customerId and limit=10 query parameter to get the customer's 10 most recent orders, 3) Extract all unique productIds from the orders returned in step 2 by parsing through each order's product list, 4) For each unique productId found, call GET /products/{productId} to retrieve detailed product information, 5) Combine the customer data from step 1 with the enriched product details from step 4, maintaining the chronological order of when products were purchased, 6) Return a composite object containing the customer information and an array of the last 10 products with their full details and order context",
      "is_composite": true
    },
    {
      "name": "get_product_with_recent_customers",
      "description": "Get detailed product information along with the last 5 customers who ordered that product",
      "use_case_description": "Get a product detail with the last 5 customers who ordered it.",
      "input_schema": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The unique identifier of the product to retrieve details and recent customers for"
          }
        },
        "required": [
          "productId"
        ]
      },
      "endpoint_mappings": [
        {
          "path": "/products/{productId}",
          "method": "get",
          "operation_id": "getProduct",
          "purpose": "Retrieve the complete product details including name, description, price, and other product attributes"
        },
        {
          "path": "/orders",
          "method": "get",
          "operation_id": "listOrders",
          "purpose": "Get all orders to identify which ones contain the specified product, then sort by date to find the most recent orders"
        },
        {
          "path": "/orders/{orderId}",
          "method": "get",
          "operation_id": "getOrder",
          "purpose": "Get detailed order information for each recent order to extract customer IDs and order specifics"
        },
        {
          "path": "/customers/{customerId}",
          "method": "get",
          "operation_id": "getCustomer",
          "purpose": "Retrieve customer details for each of the customers who placed recent orders containing the product"
        },
        {
          "path": "/customers/{customerId}/orders",
          "method": "get",
          "operation_id": "listCustomerOrders",
          "purpose": ""
        },
        {
          "path": "/customers",
          "method": "get",
          "operation_id": "listCustomers",
          "purpose": ""
        }
      ],
      "orchestration_logic": "1) Call GET /products/{productId} with the input productId to retrieve complete product details and store the product information. 2) Call GET /orders with query parameters to retrieve all orders (may need pagination with limit and page parameters to get comprehensive results). 3) Filter the orders response to identify orders that contain the specified productId in their line items, then sort these orders by order date in descending order to get the most recent orders first. 4) Select the top 5 most recent orders containing the product and extract their order IDs. 5) For each of these 5 orders, call GET /orders/{orderId} to get detailed order information and extract the customerId from each order. 6) For each unique customerId from step 5 (handling potential duplicates), call GET /customers/{customerId} to retrieve complete customer details including name, contact information, and other customer attributes. 7) Combine and return the results as an object containing the product details from step 1 and an array of the customer details from step 6, ordered by recency of their orders containing the product.",
      "is_composite": true
    }
  ]
}